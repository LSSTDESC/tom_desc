Rob's workflow

  * In the local checked out tree ( $HOME/desc/tom_desc )
     * Edit code
     * Commit and push
  * At /global/cfs/cdirs/m1727/tom/deploy_dev/tom_desc
     * git pull
  * On the spin dev server
     * Run python manage.py makemigrations -n <short name>
     * Fix bugs until that works, editing code in deploy_dev/tom_desc
         ( edit on cori, not the spin server, which doesn't have emacs )
     * Run python manage.py migrate
     * Panic if that didn't work, try to fix it
     * Run kill -HUP 1 to get new code loaded into the server
     * git status
     * git add any migrations that were created and any edited files
     * Commit and push
   * In the local checked out tree:
     * Git pull

When ready to deploy to production:

  * At /global/cfs/cdirs/m1727/tom/deploy_production/tom_desc
     * git pull
  * On the spin production server
     * Run python manage.py migrate
     * Panic if that didn't just work
     * Run kill -HUP 1
     
     

======================================================================

Resetting migrations

WARNING : This will blow away the database tables for the app!!!

I needed to do this as I wanted to move from PostGIS to G3C, but the old
migrations would have required PostGIS to work.  What I did:

 * python manage.py migrate <app> zero
 * blow away everything in <app>/migrations
 * python manage.py makemigrations <app>
 * python manage.py migrate <app>

======================================================================

Adding a group permission

  from django.contrib.auth.models import Group, Permission
  perm = Permission.objects.get( codename='elasticc_admin' )
  g = Group.objects.get( name='elasticc_admin' )
  g.permissions.add( perm )

======================================================================

Mouting postgres

I had trouble with my persistent volume claim because postgres couldn't
write to the directory.  I created a temp container (with just some
linux image) that moutned the same persistent mount, went in there and
did a chown of 101:104 (the postgres user and group in my postgres
image) on the persistent mount.

 
======================================================================

Env vars from the old tom that we might need again:

FINK_GROUP_ID lsstfr-johann
FINK_SERVER 134.158.74.95:24499,
FINK_TOPIC fink_early_sn_candidates_ztf
FINK_USERNAME tom-rknop-dev-postgres-7fc9fb874c-77nj4
GOOGLE_APPLICATION_CREDENTIALS /secrets/GCP_auth_key-pitt_broker_user_project.json
GOOGLE_CLOUD_PROJECT pitt-broker-user-project

There's also the secret

GCP_auth_key-pitt_broker_user_project.json
