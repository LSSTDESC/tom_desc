version: "3.3"

services:
  kafka-zookeeper:
    image: registry.nersc.gov/m1727/raknop/kafka
    build:
      context: ../docker_kafka
    healthcheck:
      test: netcat -w 1 localhost 2181 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
    entrypoint: [ "bin/zookeeper-server-start.sh", "config/zookeeper.properties" ]

  kafka-server:
    depends_on:
       kafka-zookeeper:
         condition: service_healthy
    image: registry.nersc.gov/m1727/raknop/kafka
    build:
      context: ../docker_kafka
    healthcheck:
      test: netcat -w 1 localhost 9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
    entrypoint: [ "bin/kafka-server-start.sh", "config/server.properties" ]

  fakebroker:
    depends_on:
      kafka-server:
        condition: service_healthy
    image: registry.nersc.gov/m1727/raknop/fakebroker
    build:
      context: .
      dockerfile: Dockerfile.fakebroker

  postgres:
    image: registry.nersc.gov/m1727/raknop/tom-postgres:daedalus
    build:
      context: ../docker_postgres
      target: tom-postgres
    healthcheck:
      test: netcat -w 1 localhost 5432 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5

  # cassandra:
  #   image: registry.nersc.gov/m1727/raknop/tom_cassandra
  #   build:
  #     context: ../docker_cassandra
  #   healthcheck:
  #      test: cqlsh -u cassandra -p cassandra cassandra < /dev/null
  #      interval: 10s
  #      timeout: 2s
  #      retries: 10

  createdb:
    depends_on:
      postgres:
        condition: service_healthy
      # cassandra:
      #   condition: service_healthy
    image: registry.nersc.gov/m1727/raknop/tom_desc_bindmount:deadalus
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount
    volumes:
      - type: bind
        source: ../tom_desc
        target: /tom_desc/tom_desc
      - type: bind
        source: .
        target: /tests
      - type: bind
        source: ../secrets
        target: /secrets
    environment:
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
    entrypoint:
      - /bin/bash
      - -c
      - |
        python tom_desc/manage.py migrate
        python tom_desc/manage.py create_test_superuser
        python tom_desc/manage.py create_test_apibroker
        python /tests/create_postgres_ro_user.py
#        python tom_desc/manage.py sync_cassandra

  tom:
    depends_on:
      createdb:
        condition: service_completed_successfully
    # Want to move to daedalus image.  However, in production right
    #   now, we use the chimaera image, because of some weird
    #   incompatibility with kafka libraries and what's running
    #   on ANTARES.
    image: registry.nersc.gov/m1727/raknop/tom_desc_bindmount:chimaera
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount
    volumes:
      - type: bind
        source: ../secrets
        target: /secrets
      - type: bind
        source: ../tom_desc
        target: /tom_desc
      - type: volume
        source: query_results
        target: /query_results
    environment:
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432

  brokerpoll:
    depends_on:
      postgres:
        condition: service_healthy
      tom:
        condition: service_started
      fakebroker:
        condition: service_started
    # Want to move to daedalus image.  However, in production right
    #   now, we use the chimaera image, because of some weird
    #   incompatibility with kafka libraries and what's running
    #   on ANTARES.
    image: registry.nersc.gov/m1727/raknop/tom_desc_bindmount:chimaera
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount
    volumes:
      - type: bind
        source: ../secrets
        target: /secrets
      - type: bind
        source: ../tom_desc
        target: /tom_desc
    environment:
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
    entrypoint: [ "python", "manage.py", "brokerpoll2", "--do-test" ]

  shellhost:
    depends_on:
      postgres:
        condition: service_healthy
      # cassandra:
      #   condition: service_healthy
      tom:
        condition: service_started
      fakebroker:
       condition: service_started
      brokerpoll:
        condition: service_started
    image: registry.nersc.gov/m1727/raknop/tom_desc_extcode:daedalus
    build:
      context: ../
      dockerfile: docker_server/Dockerfile.daedalus
      target: tom-server-extcode
    volumes:
      - type: bind
        source: ../secrets
        target: /secrets
      - type: bind
        source: ../tom_desc
        target: /tom_desc
      - type: bind
        source: .
        target: /tests
      - type: bind
        source: ./elasticc2_alert_test_data
        target: /elasticc2data
      - type: volume
        source: query_results
        target: /query_results
    environment:
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
    entrypoint: [ "tail", "-f", "/etc/issue" ]

  # This won't work right now, there's scary things
  #   about test data and such
  # runtests:
  #   depends_on:
  #     tom:
  #       condition: service_started
  #     kafka-server:
  #       condition: service_healthy
  #     fakebroker:
  #       condition: service_started
  #     brokerpoll:
  #       condition: service_started
  #   image: registry.nersc.gov/m1727/raknop/tom_desc_extcode:daedalus
  #   build:
  #     context: ../
  #     dockerfile: docker_server/Dockerfile.daedalus
  #     target: tom-server-extcode
  #   volumes:
  #     - type: bind
  #       source: ../secrets
  #       target: /secrets
  #     - type: bind
  #       source: ../tom_desc
  #       target: /tom_desc
  #     - type: bind
  #       source: .
  #       target: /tests
  #     - type: bind
  #       source: ${ELASTICC2_TEST_DATA:-/dev/null}
  #       target: /elasticc2data
  #     - type: volume
  #       source: query_results
  #       target: /query_results
  #   working_dir: /tests
  #   environment:
  #     DB_NAME: tom_desc
  #     DB_HOST: postgres
  #     DB_USER: postgres
  #     DB_PASS: fragile
  #     DB_PORT: 5432
  #   entrypoint: [ "pytest", "-v" ]

volumes:
  query_results:
