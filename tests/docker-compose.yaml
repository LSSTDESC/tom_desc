services:
  kafka-zookeeper:
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/kafka:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../docker_kafka
    healthcheck:
      test: netcat -w 1 localhost 2181 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
    entrypoint: [ "bin/zookeeper-server-start.sh", "config/zookeeper.properties" ]

  kafka-server:
    depends_on:
       kafka-zookeeper:
         condition: service_healthy
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/kafka:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../docker_kafka
    healthcheck:
      test: netcat -w 1 localhost 9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
    entrypoint: [ "bin/kafka-server-start.sh", "config/server.properties" ]

  postgres:
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/tom-postgres:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../docker_postgres
      target: tom-postgres
    healthcheck:
      test: netcat -w 1 localhost 5432 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5

  mongodb:
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/tom-mongodb:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../docker_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb_admin
      MONGO_INITDB_ROOT_PASSWORD: fragile
      MONGO_ALERT_WRITER_USERNAME: mongodb_alert_writer
      MONGO_ALERT_WRITER_PASSWORD: writer
      MONGO_ALERT_READER_USERNAME: mongodb_alert_reader
      MONGO_ALERT_READER_PASSWORD: reader
    healthcheck:
      test: netcat -w 1 localhost 27017 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
  createdb:
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/tom_desc_bindmount:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount
    volumes:
      - type: bind
        source: ../tom_desc
        target: /tom_desc/tom_desc
      - type: bind
        source: .
        target: /tests
      - type: bind
        source: ../secrets
        target: /secrets
      - type: volume
        source: logs
        target: /logs
    environment:
      LOGDIR: /logs
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
      MONGOHOST: mongodb
      MONGODB_ADMIN: mongodb_admin
      MONGODB_ADMIN_PASSWORD: fragile
      MONGODB_ALERT_WRITER: mongodb_alert_writer
      MONGODB_ALERT_WRITER_PASSWORD: writer
      MONGODB_ALERT_READER: mongdb_alert_reader
      MONGODB_ALERT_READER_PASSWORD: reader
    entrypoint:
      - /bin/bash
      - -c
      - |
        python tom_desc/manage.py migrate &&
        python tom_desc/manage.py create_test_superuser &&
        python tom_desc/manage.py create_test_apibroker &&
        python /tests/create_postgres_ro_user.py &&
        python /tests/setup_mongodb.py


  tom:
    depends_on:
      createdb:
        condition: service_completed_successfully
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/tom_desc_bindmount:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount
    volumes:
      - type: bind
        source: ../secrets
        target: /secrets
      - type: bind
        source: ../tom_desc
        target: /tom_desc
      - type: volume
        source: query_results
        target: /query_results
      - type: volume
        source: logs
        target: /logs
    environment:
      LOGDIR: /logs
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
      MONGOHOST: mongodb
      MONGODB_ADMIN: mongodb_admin
      MONGODB_ADMIN_PASSWORD: fragile
      MONGODB_ALERT_WRITER: mongodb_alert_writer
      MONGODB_ALERT_WRITER_PASSWORD: writer
      MONGODB_ALERT_READER: mongdb_alert_reader
      MONGODB_ALERT_READER_PASSWORD: reader


  # Thought required: want to make this dependent on
  #   createdb completed successfully, or just on the
  #   database servers being up?  The advantage of the latter
  #   is that you can get shell started even if there are
  #   database migration errors, and use shell to diagnose/fix
  #   them.
  shell:
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      tom:
        condition: service_started
      kafka-server:
        condition: service_healthy
      # fakebroker:
      #   condition: service_started
      # brokerpoll:
      #   condition: service_started
      # brokerpoll_fastdb_dev:
      #   condition: service_started
    image: ${TOM_DOCKER_ARCHIVE:-ghcr.io/lsstdesc/tom_desc}/tom_server_bindmount_dev:${TOM_DOCKER_VERSION:-latest}
    build:
      context: ../
      dockerfile: docker_server/Dockerfile
      target: tom-server-bindmount-dev
    volumes:
      - type: bind
        source: ../secrets
        target: /secrets
      - type: bind
        source: ../tom_desc
        target: /tom_desc
      - type: bind
        source: .
        target: /tests
      - type: bind
        source: ./elasticc2_alert_test_data
        target: /elasticc2data
      - type: volume
        source: query_results
        target: /query_results
      - type: volume
        source: logs
        target: /logs
    environment:
      LOGDIR: /logs
      DB_NAME: tom_desc
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASS: fragile
      DB_PORT: 5432
      MONGOHOST: mongodb
      MONGODB_ADMIN: mongodb_admin
      MONGODB_ADMIN_PASSWORD: fragile
      MONGODB_ALERT_WRITER: mongodb_alert_writer
      MONGODB_ALERT_WRITER_PASSWORD: writer
      MONGODB_ALERT_READER: mongdb_alert_reader
      MONGODB_ALERT_READER_PASSWORD: reader
    entrypoint: [ "tail", "-f", "/etc/issue" ]

volumes:
  query_results:
  logs:
