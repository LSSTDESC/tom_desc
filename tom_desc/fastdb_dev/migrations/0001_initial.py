# Generated by Django 4.2.16 on 2025-01-14 20:40

import db.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import psqlextra.backend.migrations.operations.add_default_partition
import psqlextra.backend.migrations.operations.create_partitioned_model
import psqlextra.manager.manager
import psqlextra.models.partitioned
import psqlextra.types
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        psqlextra.backend.migrations.operations.create_partitioned_model.PostgresCreatePartitionedModel(
            name='BrokerClassification',
            fields=[
                ('classification_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('alert_id', models.BigIntegerField(null=True)),
                ('dia_source', models.BigIntegerField(db_comment='Local copy of dia_source to circumvent Django')),
                ('topic_name', models.CharField(max_length=200, null=True)),
                ('desc_ingest_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('broker_ingest_timestamp', models.DateTimeField(null=True)),
                ('classifier', models.BigIntegerField(verbose_name='Local copy of clasifier to circumvent Django')),
                ('classifications', models.JSONField(db_index=True, null=True)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'broker_classification',
            },
            partitioning_options={
                'method': psqlextra.types.PostgresPartitioningMethod['LIST'],
                'key': ['classifier'],
            },
            bases=(psqlextra.models.partitioned.PostgresPartitionedModel,),
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        psqlextra.backend.migrations.operations.add_default_partition.PostgresAddDefaultPartition(
            model_name='BrokerClassification',
            name='default',
        ),
        migrations.CreateModel(
            name='BrokerClassifier',
            fields=[
                ('classifier_id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('broker_name', models.CharField(max_length=100)),
                ('broker_version', models.TextField(null=True)),
                ('classifier_name', models.CharField(max_length=200)),
                ('classifier_params', models.TextField(null=True)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'broker_classifier',
            },
        ),
        migrations.CreateModel(
            name='DBViews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_name', models.TextField(db_comment='Name for view', null=True)),
                ('view_sql', models.TextField(db_comment='SQL for view', null=True)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'db_views',
            },
        ),
        psqlextra.backend.migrations.operations.create_partitioned_model.PostgresCreatePartitionedModel(
            name='DFStoPVtoSS',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('processing_version', models.TextField(db_comment='Local copy of Processing version to circumvent Django')),
                ('snapshot_name', models.TextField(db_comment='Local copy of snapshot_name to circumvent Django')),
                ('dia_forced_source', models.BigIntegerField(db_comment='Local copy of dia_source to circumvent Django')),
                ('valid_flag', models.IntegerField(db_comment='Valid data flag', default=1)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'dfs_to_pv_to_ss',
            },
            partitioning_options={
                'method': psqlextra.types.PostgresPartitioningMethod['LIST'],
                'key': ['processing_version'],
            },
            bases=(psqlextra.models.partitioned.PostgresPartitionedModel,),
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        psqlextra.backend.migrations.operations.add_default_partition.PostgresAddDefaultPartition(
            model_name='DFStoPVtoSS',
            name='default',
        ),
        psqlextra.backend.migrations.operations.create_partitioned_model.PostgresCreatePartitionedModel(
            name='DiaForcedSource',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dia_forced_source', models.BigIntegerField(db_comment='diaForcedSourceId from PPDB')),
                ('ccd_visit_id', models.BigIntegerField(db_comment='ccdVisitId from PPDB', null=True)),
                ('season', models.IntegerField(db_comment='Season when this object appears - filled from DiaObject')),
                ('fake_id', models.IntegerField(db_comment='ID to indicate fake SN, fake=integer, real=0 - filled from DiaObject', null=True)),
                ('mid_point_tai', models.FloatField(db_comment='midPointTai from PPDB', null=True)),
                ('filter_name', models.TextField(db_comment='CcdVisit.filterName from PPDB')),
                ('ps_flux', models.FloatField(db_comment='psFlux from PPDB')),
                ('ps_flux_err', models.FloatField(db_comment='psFluxErr from PPDB')),
                ('processing_version', models.TextField(db_comment='Local copy of Processing version key to circumvent Django')),
                ('valid_flag', models.IntegerField(db_comment='Valid data flag', default=1)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'dia_forced_source',
            },
            partitioning_options={
                'method': psqlextra.types.PostgresPartitioningMethod['LIST'],
                'key': ['processing_version'],
            },
            bases=(psqlextra.models.partitioned.PostgresPartitionedModel,),
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        psqlextra.backend.migrations.operations.add_default_partition.PostgresAddDefaultPartition(
            model_name='DiaForcedSource',
            name='default',
        ),
        migrations.CreateModel(
            name='DiaObject',
            fields=[
                ('dia_object', models.BigIntegerField(db_comment='diaObjectId from PPDB', primary_key=True, serialize=False)),
                ('dia_object_iau_name', models.TextField(db_comment='IAU Name', null=True)),
                ('validity_start', models.DateTimeField(db_comment='Time when validity of this diaObject starts', default=django.utils.timezone.now)),
                ('validity_end', models.DateTimeField(blank=True, db_comment='Time when validity of this diaObject ends', null=True)),
                ('season', models.IntegerField(db_comment='Season when this object appears')),
                ('fake_id', models.IntegerField(db_comment='ID to indicate fake SN, fake = integer, real = 0', default=0)),
                ('ra', models.FloatField(db_comment='RA of object at time radecTai')),
                ('ra_sigma', models.FloatField(db_comment='Uncertainty in RA of object at time radecTai')),
                ('decl', models.FloatField(db_comment='DEC of object at time radecTai')),
                ('decl_sigma', models.FloatField(db_comment='Uncertainty in DEC of object at time radecTai')),
                ('ra_dec_tai', models.FloatField(db_comment='Time at which object was at position ra/dec')),
                ('nobs', models.IntegerField(db_comment='Number of observations of this object')),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'dia_object',
            },
        ),
        psqlextra.backend.migrations.operations.create_partitioned_model.PostgresCreatePartitionedModel(
            name='DiaSource',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dia_source', models.BigIntegerField(db_comment='diaSourceId from Alert stream')),
                ('ccd_visit_id', models.BigIntegerField(db_comment='ccdVisitId from PPDB', null=True)),
                ('parent_dia_source_id', models.BigIntegerField(db_column='parent_dia_source_id', db_comment='parentdiaSourceId from PPDB', null=True)),
                ('season', models.IntegerField(db_comment='Season when this object appears - filled from DiaObject')),
                ('fake_id', models.IntegerField(db_comment='ID to indicate fake SN, fake=integer, real=0 - filled from DiaObject', null=True)),
                ('mid_point_tai', models.FloatField(db_comment='midPointTai from PPDB')),
                ('filter_name', models.TextField(db_comment='CcdVisit.filterName from PPDB')),
                ('ra', models.FloatField(db_comment='RA of the center of this source from PPDB')),
                ('decl', models.FloatField(db_comment='DEC of the center of this source from PPDB')),
                ('ps_flux', models.FloatField(db_comment='psFlux from PPDB')),
                ('ps_flux_err', models.FloatField(db_comment='psFluxErr from PPDB')),
                ('snr', models.FloatField(db_comment='snr from PPDB')),
                ('processing_version', models.TextField(db_comment='Local copy of Processing version key to circumvent Django')),
                ('broker_count', models.IntegerField(db_comment='Number of brokers that alerted on this source')),
                ('valid_flag', models.IntegerField(db_comment='Valid data flag', default=1)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'dia_source',
            },
            partitioning_options={
                'method': psqlextra.types.PostgresPartitioningMethod['LIST'],
                'key': ['processing_version'],
            },
            bases=(psqlextra.models.partitioned.PostgresPartitionedModel,),
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        psqlextra.backend.migrations.operations.add_default_partition.PostgresAddDefaultPartition(
            model_name='DiaSource',
            name='default',
        ),
        psqlextra.backend.migrations.operations.create_partitioned_model.PostgresCreatePartitionedModel(
            name='DStoPVtoSS',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('processing_version', models.TextField(db_comment='Local copy of Processing version key to circumvent Django')),
                ('snapshot_name', models.TextField(db_comment='Local copy of snapshot_name key to circumvent Django')),
                ('dia_source', models.BigIntegerField(db_comment='Local copy of dia_source to circumvent Django')),
                ('valid_flag', models.IntegerField(db_comment='Valid data flag', default=1)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'ds_to_pv_to_ss',
            },
            partitioning_options={
                'method': psqlextra.types.PostgresPartitioningMethod['LIST'],
                'key': ['processing_version'],
            },
            bases=(psqlextra.models.partitioned.PostgresPartitionedModel,),
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        psqlextra.backend.migrations.operations.add_default_partition.PostgresAddDefaultPartition(
            model_name='DStoPVtoSS',
            name='default',
        ),
        migrations.CreateModel(
            name='LastUpdateTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update_time', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'last_update_time',
            },
        ),
        migrations.CreateModel(
            name='ProcessingVersions',
            fields=[
                ('version', models.TextField(db_comment='Processing version', primary_key=True, serialize=False)),
                ('validity_start', models.DateTimeField(db_comment='Time when validity of this processing version starts')),
                ('validity_end', models.DateTimeField(blank=True, db_comment='Time when validity of this processing version ends', null=True)),
            ],
            options={
                'db_table': 'processing_versions',
            },
        ),
        migrations.CreateModel(
            name='Snapshots',
            fields=[
                ('name', models.TextField(db_comment='Snapshot name', primary_key=True, serialize=False)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'snapshots',
            },
        ),
        migrations.CreateModel(
            name='SnapshotTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_comment='Tag name')),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('snapshot_name', models.ForeignKey(db_column='snapshot_name', on_delete=django.db.models.deletion.RESTRICT, related_name='tag_snap_name', to='fastdb_dev.snapshots')),
            ],
            options={
                'db_table': 'snapshot_tags',
            },
        ),
        migrations.CreateModel(
            name='HostGalaxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_gal_id', models.BigIntegerField(db_comment='nearbyObj from PPDB')),
                ('host_gal_flux', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(db_comment='galaxy flux in ugrizy', null=True), size=None)),
                ('host_gal_fluxerr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(db_comment='galaxy flux error in ugrizy', null=True), size=None)),
                ('insert_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('processing_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='hg_proc_version', to='fastdb_dev.processingversions')),
            ],
            options={
                'db_table': 'host_galaxy',
            },
        ),
        migrations.AddIndex(
            model_name='dstopvtoss',
            index=models.Index(fields=['processing_version', 'snapshot_name', 'dia_source'], name='ds_to_pv_to_process_191840_idx'),
        ),
        migrations.AddConstraint(
            model_name='dstopvtoss',
            constraint=models.UniqueConstraint(fields=('processing_version', 'snapshot_name', 'dia_source'), name='unique_ds_pv_ss'),
        ),
        migrations.AddField(
            model_name='diasource',
            name='dia_object',
            field=models.ForeignKey(db_column='dia_object', on_delete=django.db.models.deletion.RESTRICT, related_name='dia_obj_s', to='fastdb_dev.diaobject'),
        ),
        migrations.AddField(
            model_name='diaobject',
            name='host_gal_first',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hgal1', to='fastdb_dev.hostgalaxy'),
        ),
        migrations.AddField(
            model_name='diaobject',
            name='host_gal_second',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hgal2', to='fastdb_dev.hostgalaxy'),
        ),
        migrations.AddField(
            model_name='diaobject',
            name='host_gal_third',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hgal3', to='fastdb_dev.hostgalaxy'),
        ),
        migrations.AddField(
            model_name='diaforcedsource',
            name='dia_object',
            field=models.ForeignKey(db_column='dia_object', on_delete=django.db.models.deletion.RESTRICT, related_name='dia_obj_fs', to='fastdb_dev.diaobject'),
        ),
        migrations.AddConstraint(
            model_name='dfstopvtoss',
            constraint=models.UniqueConstraint(fields=('processing_version', 'snapshot_name', 'dia_forced_source'), name='unique_dfs_pv_ss'),
        ),
        migrations.AddIndex(
            model_name='brokerclassifier',
            index=models.Index(fields=['broker_name'], name='broker_clas_broker__18601d_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassifier',
            index=models.Index(fields=['broker_name', 'broker_version'], name='broker_clas_broker__ad4009_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassifier',
            index=models.Index(fields=['broker_name', 'classifier_name'], name='broker_clas_broker__17d76a_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassifier',
            index=models.Index(fields=['broker_name', 'broker_version', 'classifier_name', 'classifier_params'], name='broker_clas_broker__e41a25_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassification',
            index=models.Index(fields=['classification_id'], name='broker_clas_classif_d8837f_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassification',
            index=models.Index(fields=['alert_id'], name='broker_clas_alert_i_702932_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassification',
            index=models.Index(fields=['classification_id', 'alert_id'], name='broker_clas_classif_aec0d1_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassification',
            index=models.Index(fields=['dia_source'], name='broker_clas_dia_sou_e2ef09_idx'),
        ),
        migrations.AddIndex(
            model_name='brokerclassification',
            index=models.Index(fields=['dia_source', 'alert_id', 'classification_id'], name='broker_clas_dia_sou_819942_idx'),
        ),
        migrations.AddConstraint(
            model_name='brokerclassification',
            constraint=models.UniqueConstraint(fields=('classifier', 'classification_id', 'alert_id'), name='unique_brokerclassification'),
        ),
        migrations.AddConstraint(
            model_name='snapshottags',
            constraint=models.UniqueConstraint(fields=('name', 'snapshot_name'), name='unique_ss_tag'),
        ),
        migrations.AddIndex(
            model_name='diasource',
            index=models.Index(fields=['dia_object'], name='dia_source_dia_obj_3426a4_idx'),
        ),
        migrations.AddIndex(
            model_name='diasource',
            index=models.Index(fields=['dia_source'], name='dia_source_dia_sou_bd33c9_idx'),
        ),
        migrations.AddIndex(
            model_name='diasource',
            index=db.models.LongNameBTreeIndex(db.models.q3c_ang2ipix('ra', 'decl'), name='idx_fastdb_dev_diasource_q3c'),
        ),
        migrations.AddConstraint(
            model_name='diasource',
            constraint=models.UniqueConstraint(fields=('processing_version', 'dia_source'), name='unique_pv_dia_source'),
        ),
        migrations.AddIndex(
            model_name='diaobject',
            index=models.Index(fields=['dia_object'], name='dia_object_dia_obj_cbc1d3_idx'),
        ),
        migrations.AddIndex(
            model_name='diaobject',
            index=models.Index(fields=['season'], name='dia_object_season_a9c9e7_idx'),
        ),
        migrations.AddIndex(
            model_name='diaobject',
            index=models.Index(fields=['dia_object', 'season'], name='dia_object_dia_obj_2389a7_idx'),
        ),
        migrations.AddIndex(
            model_name='diaobject',
            index=db.models.LongNameBTreeIndex(db.models.q3c_ang2ipix('ra', 'decl'), name='idx_fastdb_dev_diaobject_q3c'),
        ),
        migrations.AddIndex(
            model_name='diaforcedsource',
            index=models.Index(fields=['dia_object'], name='dia_forced__dia_obj_d7a5b1_idx'),
        ),
        migrations.AddIndex(
            model_name='diaforcedsource',
            index=models.Index(fields=['dia_forced_source'], name='dia_forced__dia_for_3996dd_idx'),
        ),
        migrations.AddConstraint(
            model_name='diaforcedsource',
            constraint=models.UniqueConstraint(fields=('processing_version', 'dia_forced_source'), name='unique_pv_dia_forced_source'),
        ),
    ]
